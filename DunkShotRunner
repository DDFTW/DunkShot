package com.company;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;

public class DunkShotRunner {

    static double power;
    static double powerFactor = 0.04;
    static double distance;
    static double basketX;
    static double basketY;
    static double xChange = 0;
    static double yChange = 0;
    static double theta;
    static double xStarts;
    static double yStarts;
    static double xDirection = 0;
    static double yDirection = 0;
    static Timer repainter;
    static JPanel p;
    static JButton reset;
    static JButton quit;

    //Directions:  Drag in any direction to launch ball in the opposite direction of the drag, like pulling a sling shot.
    //the further the mouse is dragged, the more power the launch will have and the further the ball will go.
    //The goal is to get it into the hoop as many times as you can.




    //NOTE: Sometimes when resetting, the hoops and score take a while to disappear. Not sure why.



    public static void main(String[] args) {
        JFrame f = new JFrame("DunkShot");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setSize(600, 900);
        f.setResizable(false);
        DrawingComponent game = new DrawingComponent();
        f.getContentPane().setBackground(new Color(86, 211, 240));
        f.add(game);

        class CanvasListener implements MouseListener{

            public void mouseClicked(MouseEvent arg0) {}
            public void mouseEntered(MouseEvent arg0) {}
            public void mouseExited(MouseEvent arg0) {}
            public void mousePressed(MouseEvent arg0) {
                xStarts = arg0.getX();
                yStarts = arg0.getY();
                basketX = game.getHoopX();
                basketY = game.getHoopY();

            }
            public void mouseReleased(MouseEvent arg0) {
                if(!isInMotion() & !game.getRealgined()) {
                    calculateTheta2(arg0.getX(), arg0.getY(), xStarts, yStarts);
                    power = powerFactor * distance;
                    xChange = xDirection * power * Math.cos(theta);
                    yChange = yDirection * power * Math.sin(theta);
                }
            }

        }


        class shotListener implements MouseMotionListener{

            public void mouseDragged(MouseEvent arg0) {
//                System.out.print("\ndragged: " + arg0.getX());
                distance = Math.sqrt(Math.pow(arg0.getX() - basketX, 2) + Math.pow(arg0.getY() - basketY, 2));
            }
            public void mouseMoved(MouseEvent arg0) {}
        }

        CanvasListener cListen = new CanvasListener();
        shotListener sListen = new shotListener();
        f.addMouseListener(cListen);
        f.addMouseMotionListener(sListen);

        f.setVisible(true);


        class ResetListener implements ActionListener{

            public void actionPerformed(ActionEvent arg0) {
                game.reset();
                yChange = 0;
                xChange = 0;
                f.remove(p);
                f.revalidate();
                f.repaint();
                repainter.restart();
            }

        }

        class StopListener implements ActionListener{
            public void actionPerformed(ActionEvent e) {f.dispose();}
        }

        class TimerListener implements ActionListener {
            public void actionPerformed(ActionEvent e){
                if(game.getBallY() < 900) {
                    if(game.isOut()){xChange *= -1;}
                    game.moveBall2(xChange, yChange);
                    if(game.isInHoop2()){game.realign();}
                    game.revalidate();
                    game.repaint();
                } else {restart();}
            }


            public void restart() {
                repainter.stop();
                p = new JPanel();
                reset = new JButton("Your Score: " + game.getScore() + "\n \n \n    Restart?");
                reset.addActionListener(new ResetListener());
                reset.setFont(new Font("Arial", Font.PLAIN, 40));
                reset.setBackground(new Color(184, 152, 180));
                try{
                    Image resetBack = ImageIO.read(getClass().getResource("pierreJackson.jpg"));
                    reset.setIcon(new ImageIcon(resetBack));
                }catch (Exception ex) {}
                quit = new JButton("Quit");
                quit.addActionListener(new StopListener());
                quit.setFont(new Font("Arial", Font.PLAIN, 40));
                quit.setBackground(new Color(184, 139, 99));
                try{
                    Image quitBack= ImageIO.read(getClass().getResource("tiredGordon.jpg"));
                    quit.setIcon(new ImageIcon(quitBack));
                }catch (Exception ex) { }
                p.setLayout(new GridLayout(2,1));
                p.add(reset);
                p.add(quit);
                f.add(p);
                f.revalidate();
                f.repaint();
            }
        }

        repainter = new Timer(17, new TimerListener());
        repainter.start();
    }

    public static void setInitalChanges(double newXChange, double newYChange) {
        xChange = newXChange;
        yChange = newYChange;
    }

    public static void decreaseY() {yChange -= 0.5;}

    public static void calculateTheta(double xRelease, double yRelease) {
        //don't forget to figure out directions
        double xChanges = Math.abs(xRelease - basketX);
        double yChanges = Math.abs(basketY - yRelease);

        theta = Math.atan(yChanges/xChanges);
    }

    //if drag does not start at basket
    public static void calculateTheta2(double xRelease, double yRelease, double xStart, double yStart) {
        //don't forget to figure out directions
        if(xRelease - xStart < 0){
            xDirection = 1;
        } else if(xRelease - xStart > 0){
            xDirection = -1;
        }

        if(yStart - yRelease < 0){
            yDirection = 1;
        }else if(yStart - yRelease > 0){
            yDirection = -1;
        }
        double xChanges = Math.abs(xRelease - xStart);
        double yChanges = Math.abs(yStart - yRelease);

        theta = Math.atan(yChanges/xChanges);
    }

    public static boolean isInMotion() {
        if(yChange == 0 && xChange == 0){
            return false;
        }else return true;
    }
}
